// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Role {
  USER
  ADMIN
}

enum PostType {
  TECHNOLOGY
  SHARE
  QUESTION
  OTHER
}

model Author {
  id      String   @id @default(uuid())
  userId  String   @unique
  name    String
  email   String   @unique
  image   String   @db.Text
  posts   Post[]
  profile Profile?
  role    Role     @default(USER)
}

model Profile {
  id        String   @id @default(uuid())
  bio       String?
  author    Author   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id    String @id @default(uuid())
  title String

  image      String  @db.Text
  content    String  @db.Text
  censored   Boolean
  censoredBy String
  published  Boolean @default(false)

  postType PostType

  author   Author @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  createdBy String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  comments Comment[]

  // @@index([authorId])
  @@index([authorId])
}

model Comment {
  id        String   @id @default(uuid())
  content   String   @db.Text
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([postId])
}
